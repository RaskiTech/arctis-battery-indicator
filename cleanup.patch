diff --git a/README.md b/README.md
index 1ac06d0..eb72d7a 100644
--- a/README.md
+++ b/README.md
@@ -48,6 +48,8 @@ I have a post on my website explaining that tries to explain how to do this: <ht
 
 The parameters, such as `write_bytes` and `battery_percent_idx` can be discovered by sniffing the USB traffic with something like [WireShark](https://www.wireshark.org/) and [USBPcap](https://desowin.org/usbpcap/)
 
+Also see example [config.toml](./example.config.toml) for more documentation.
+
 If you have found the necessary data, you can try it out by creating a custom config file:
 
 1. Install version 2.0.0 or greater of Arctis Battery Indicator
diff --git a/example-arctis9.config.toml b/example-arctis9.config.toml
deleted file mode 100644
index 4d50bd1..0000000
--- a/example-arctis9.config.toml
+++ /dev/null
@@ -1,10 +0,0 @@
-name = "Arctis 9"
-product_id = 0x12c2
-# interface_num = 3                 # optional
-write_bytes = [0x00, 0x20]        # length is two
-read_buf_size = 12
-battery_percent_idx = 3
-battery_range = [0x64, 0x9a]
-charging_status_idx = 4           # optional
-connected_status_idx = 1
-# usage_page_and_id = [0xffc0, 0x1] # optional
\ No newline at end of file
diff --git a/example.config.toml b/example.config.toml
index 8ee69e4..670cf31 100644
--- a/example.config.toml
+++ b/example.config.toml
@@ -1,10 +1,24 @@
+# this is an example config that works for Arctis Nova 7
+# optional fields can be commented out with the '#' character
+
 name = "Arctis Nova 7"
 product_id = 0x2202
-interface_num = 3                 # optional
-write_bytes = [0x00, 0xb0]        # length is two
+# optional, HID interface number
+interface_num = 3                 
+# what bytes should be written to device to get battery status
+# only the first 2 bytes are read
+write_bytes = [0x00, 0xb0]
+# some devices require a very specific read buf size
+# commonly 6, 8 or any power of 2
 read_buf_size = 8
 battery_percent_idx = 2
-battery_range = [0x00, 0x04]
+battery_range = [0x00, 0x04]      # min=0, max=4
 charging_status_idx = 3           # optional
-# connected_status_idx = 1	      # optional
-usage_page_and_id = [0xffc0, 0x1] # optional
\ No newline at end of file
+
+# optional, used for connecting to the correct device.
+# Every headset has multiple HID devices.
+# Windows has a way to connect to the correct device using a vendor-specific usage page and id
+usage_page_and_id = [0xffc0, 0x1] 
+
+# optional, used when connected and charging idx are separate (Arctis 9)
+# connected_status_idx = 1
\ No newline at end of file
diff --git a/src/config_file.rs b/src/config_file.rs
index 4aae35d..e732bbb 100644
--- a/src/config_file.rs
+++ b/src/config_file.rs
@@ -14,7 +14,7 @@ pub struct ConfigFile {
     pub charging_status_idx: Option<usize>,
     pub connected_status_idx: Option<usize>,
     /// Usage page first, then id
-    pub usage_page_id: Option<(u16, u16)>,
+    pub usage_page_and_id: Option<(u16, u16)>,
     /// Size of buffer to send when reading battery status
     pub read_buf_size: usize,
     pub battery_range: (u8, u8),
@@ -33,7 +33,7 @@ impl From<ConfigFile> for HeadphoneModel {
             interface_num: value.interface_num,
             charging_status_idx: value.charging_status_idx,
             connected_status_idx: value.connected_status_idx,
-            usage_page_and_id: value.usage_page_id,
+            usage_page_and_id: value.usage_page_and_id,
             read_buf_size: value.read_buf_size,
             battery_range: value.battery_range,
         }
diff --git a/src/hid.rs b/src/hid.rs
index 8d93fa4..385499f 100644
--- a/src/hid.rs
+++ b/src/hid.rs
@@ -9,7 +9,7 @@ use rust_i18n::t;
 pub enum ChargingState {
     Disconnected = 0,
     Charging = 1,
-    Discharging = 3,
+    Connected = 3,
 }
 
 #[derive(Debug)]
@@ -20,9 +20,6 @@ pub struct Headphone {
     name: String,
     /// percentage in range [0,4]
     pub battery_state: u8,
-    /// - 0: not connected
-    /// - 1: charging
-    /// - 3: discharging
     pub charging_state: Option<ChargingState>,
 }
 
@@ -38,7 +35,7 @@ impl Headphone {
     pub fn status_text(&self) -> Option<String> {
         self.charging_state.map(|state| match state {
             ChargingState::Charging => t!("device_charging").into(),
-            ChargingState::Discharging => "".into(),
+            ChargingState::Connected => "".into(),
             ChargingState::Disconnected => t!("device_disconnected").into(),
         })
     }
@@ -63,9 +60,8 @@ impl Headphone {
             .read_timeout(&mut buf[0..self.model.read_buf_size], 100)
             .with_context(|| "reading from device")?;
 
-        trace!("read {n}: {:?}", &buf[0..self.model.read_buf_size]);
+        trace!("Read {n}: {:?}", &buf[0..self.model.read_buf_size]);
 
-        // explicitly run each check
         if n == 0 {
             debug!("No data read from device; ignoring");
             return Ok(false);
@@ -74,11 +70,14 @@ impl Headphone {
             debug!("Read invalid bytes from device: {:?}; ignoring", &buf[0..5]);
             return Ok(false);
         }
-        // skip this check? i think its unnecessary
-        // if !self.model.write_bytes.contains(&buf[0]) {
-        //     debug!("Read write bytes from device: {:?}; ignoring {:?}", &buf[0..5], &buf[0]);
-        //     return Ok(false);
-        // }
+
+        if !self.model.write_bytes.contains(&buf[0]) {
+            // just log the error and continue
+            trace!(
+                "Result did not contain report number, which should be one of {:?}",
+                &self.model.write_bytes
+            );
+        }
 
         // save old state
         let Headphone {
@@ -91,55 +90,59 @@ impl Headphone {
 
         // check if battery state is within correct range
         let (battery_min, battery_max) = self.model.battery_range;
-        if battery_state >= battery_min && battery_state <= battery_max {
+
+        if battery_min <= battery_state && battery_state <= battery_max {
             self.battery_state = battery_state;
         } else {
-            // otherwise the data might be garbage
+            // don't update battery state
             debug!(
                 "Returned battery state is invalid: {:x}; ignoring",
                 battery_state
             );
         }
 
-        if let Some(charging_state_idx) = self.model.charging_status_idx {
-            // get the charging state, if theres no connected state, this'll be used.
-            let mut device_state = buf[charging_state_idx];
-
-            // if device config has a separate index for connected state
-            if let Some(connected_state_idx) = self.model.connected_status_idx {
-                let connected_state = buf[connected_state_idx];
-
-                // for arctis 9, this is 1 when on and 3 when off/disconnected, but maybe its different for different devices.
-                // assume 1 means on
-                if connected_state != 1 {
-                    // device isn't on, so set the state to disconnected
-                    device_state = 0; // disconnected
-                } else {
-                    // device is on, set state
-                    
-                    // all devices with separate values probably use 0 for not charging and 1 for charging, like arctis 9
-                    // maybe this has to be changed in future for other devices
-                    if buf[charging_state_idx] == 0 {
-                        device_state = 3; // not charging
-                    } else if buf[charging_state_idx] == 1 {
-                        device_state = 1; // charging
+        if let Some(charging_status_idx) = self.model.charging_status_idx {
+            self.charging_state =
+                if let Some(connected_status_idx) = self.model.connected_status_idx {
+                    // if device config has a separate index for connected state
+
+                    let connected_state = buf[connected_status_idx];
+                    // connected_state is 1 when on and 3 when off/disconnected for Arctis 9, but might be different for other devices.
+                    if connected_state == 1 {
+                        // all devices with separate values for connected status 
+                        // probably use 0 for not charging and 1 for charging, like Arctis 9
+                        match buf[charging_status_idx] {
+                            0 => Some(ChargingState::Connected),
+                            1 => Some(ChargingState::Charging),
+                            _ => {
+                                debug!(
+                                    "Returned charge state is invalid: {:x}; ignoring",
+                                    buf[charging_status_idx],
+                                );
+                                return Ok(false)
+                            }
+                        }
                     } else {
-                        // invalid state
-                        debug!("Returned charge state is invalid: {:x}; ignoring", device_state);
-                        return Ok(false);
+                        // device isn't on, so set the state to disconnected
+                        Some(ChargingState::Disconnected)
                     }
-                }
-            }
-
-            self.charging_state = match device_state {
-                0 => Some(ChargingState::Disconnected),
-                1 => Some(ChargingState::Charging),
-                3 => Some(ChargingState::Discharging),
-                _ => {
-                    debug!("Returned charge state is invalid: {}; ignoring", device_state);
-                    None
-                }
-            }
+                } else {
+                    // Uses the same status idx for charging, connected and disconnected
+                    // this is most headphones
+
+                    match buf[charging_status_idx] {
+                        0 => Some(ChargingState::Disconnected),
+                        1 => Some(ChargingState::Charging),
+                        3 => Some(ChargingState::Connected),
+                        _ => {
+                            debug!(
+                                "Returned charge state is invalid: {:x}; ignoring",
+                                buf[charging_status_idx],
+                            );
+                            None
+                        }
+                    }
+                };
         }
 
         Ok(self.battery_state != old_battery || self.charging_state != old_charging)
@@ -157,7 +160,7 @@ impl std::fmt::Display for Headphone {
         )?;
 
         if let Some(status) = self.status_text() {
-            write!(f, " {status}",)?;
+            write!(f, " {status}")?;
         }
 
         Ok(())
@@ -208,7 +211,7 @@ pub fn find_headphone(
 
             if model.product_id == product_id && same_interface_num {
                 debug!(
-                    "Connecting to device at inteface {}", 
+                    "Connecting to device at inteface {}",
                     model.interface_num.unwrap_or(0)
                 );
                 match connect_device(&api, model, device) {
diff --git a/src/lib.rs b/src/lib.rs
index 0419b1c..0329990 100644
--- a/src/lib.rs
+++ b/src/lib.rs
@@ -280,9 +280,9 @@ impl ApplicationHandler<()> for AppState {
 #[test]
 fn load_all_icons() {
     for i in 0..=100 {
-        let _ = AppState::load_icon(Theme::Dark, i, Some(ChargingState::Discharging));
+        let _ = AppState::load_icon(Theme::Dark, i, Some(ChargingState::Connected));
     }
     for i in 0..=100 {
-        let _ = AppState::load_icon(Theme::Light, i, Some(ChargingState::Discharging));
+        let _ = AppState::load_icon(Theme::Light, i, Some(ChargingState::Connected));
     }
 }
